<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ReactiveMarbles.PropertyChanged</name>
    </assembly>
    <members>
        <member name="T:ReactiveMarbles.PropertyChanged.BindExtensions">
            <summary>
            Set of extension methods that handle binding.
            </summary>
        </member>
        <member name="M:ReactiveMarbles.PropertyChanged.BindExtensions.BindOneWay``3(``0,``2,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``2,``1}},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Performs one way binding between a property on the host to a target property.
            </summary>
            <param name="fromObject">The object which contains the host property.</param>
            <param name="targetObject">The object which contains the target property.</param>
            <param name="fromProperty">A expression to the host property.</param>
            <param name="toProperty">A expression to the target property.</param>
            <param name="scheduler">A scheduler for performing the binding on. Defaults to ImmediateScheduler.</param>
            <typeparam name="TFrom">The type of property the host is.</typeparam>
            <typeparam name="TPropertyType">The property types.</typeparam>
            <typeparam name="TTarget">The target property.</typeparam>
            <returns>A disposable which when disposed the binding will stop.</returns>
            <exception cref="T:System.ArgumentException">If there is a invalid expression.</exception>
        </member>
        <member name="M:ReactiveMarbles.PropertyChanged.BindExtensions.BindOneWay``4(``0,``2,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``2,``3}},System.Func{``1,``3},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Performs one way binding between a property on the host to a target property.
            </summary>
            <param name="fromObject">The object which contains the host property.</param>
            <param name="targetObject">The object which contains the target property.</param>
            <param name="fromProperty">A expression to the host property.</param>
            <param name="toProperty">A expression to the target property.</param>
            <param name="conversionFunc">A converter which will convert the property from the host to the target property.</param>
            <param name="scheduler">A scheduler for performing the binding on. Defaults to ImmediateScheduler.</param>
            <typeparam name="TFrom">The type of property the host is.</typeparam>
            <typeparam name="TFromProperty">The property from type.</typeparam>
            <typeparam name="TTarget">The target property.</typeparam>
            <typeparam name="TTargetProperty">The property to type.</typeparam>
            <returns>A disposable which when disposed the binding will stop.</returns>
            <exception cref="T:System.ArgumentException">If there is a invalid expression.</exception>
        </member>
        <member name="M:ReactiveMarbles.PropertyChanged.BindExtensions.BindTwoWay``4(``0,``2,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``2,``3}},System.Func{``1,``3},System.Func{``3,``1},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Performs one way binding between a property on the host to a target property.
            </summary>
            <param name="fromObject">The object which contains the host property.</param>
            <param name="targetObject">The object which contains the target property.</param>
            <param name="fromProperty">A expression to the host property.</param>
            <param name="toProperty">A expression to the target property.</param>
            <param name="hostToTargetConv">A converter which will convert the property from the host to the target property.</param>
            <param name="targetToHostConv">A converter which will convert the property from the target to the host property.</param>
            <param name="scheduler">A scheduler for performing the binding on. Defaults to ImmediateScheduler.</param>
            <typeparam name="TFrom">The type of property the host is.</typeparam>
            <typeparam name="TFromProperty">The property from type.</typeparam>
            <typeparam name="TTarget">The target property.</typeparam>
            <typeparam name="TTargetProperty">The property to type.</typeparam>
            <returns>A disposable which when disposed the binding will stop.</returns>
            <exception cref="T:System.ArgumentException">If there is a invalid expression.</exception>
        </member>
        <member name="M:ReactiveMarbles.PropertyChanged.BindExtensions.BindTwoWay``3(``0,``2,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``2,``1}},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Performs one way binding between a property on the host to a target property.
            </summary>
            <param name="fromObject">The object which contains the host property.</param>
            <param name="targetObject">The object which contains the target property.</param>
            <param name="fromProperty">A expression to the host property.</param>
            <param name="toProperty">A expression to the target property.</param>
            <param name="scheduler">A scheduler for performing the binding on. Defaults to ImmediateScheduler.</param>
            <typeparam name="TFrom">The type of property the host is.</typeparam>
            <typeparam name="TProperty">The property from type.</typeparam>
            <typeparam name="TTarget">The target property.</typeparam>
            <returns>A disposable which when disposed the binding will stop.</returns>
            <exception cref="T:System.ArgumentException">If there is a invalid expression.</exception>
        </member>
        <member name="T:ReactiveMarbles.PropertyChanged.NotifyPropertiesChangeExtensions">
            <summary>
            Provides extension methods for the notify property changed extensions.
            </summary>
        </member>
        <member name="M:ReactiveMarbles.PropertyChanged.NotifyPropertiesChangeExtensions.WhenChanged``4(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Func{``1,``2,``3})">
            <summary>
            Notifies when the specified property changes.
            </summary>
            <param name="objectToMonitor">The object to monitor.</param>
            <param name="propertyExpression1">A expression to the value1.</param>
            <param name="propertyExpression2">A expression to the value2.</param>
            <param name="conversionFunc">Parameter which converts into the end value.</param>
            <typeparam name="TObj">The type of initial object.</typeparam>
            <typeparam name="TTempReturn1">The return type of the value1.</typeparam>
            <typeparam name="TTempReturn2">The return type of the value2.</typeparam>
            <typeparam name="TReturn">The return value of the observable. Generated from the conversion func.</typeparam>
            <returns>An observable that signals when the properties specified in the expressions have changed.</returns>
            <exception cref="T:System.ArgumentNullException">Either the property expression or the object to monitor is null.</exception>
            <exception cref="T:System.ArgumentException">If there is an issue with the property expression.</exception>
        </member>
        <member name="M:ReactiveMarbles.PropertyChanged.NotifyPropertiesChangeExtensions.WhenChanged``5(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``0,``3}},System.Func{``1,``2,``3,``4})">
            <summary>
            Notifies when the specified property changes.
            </summary>
            <param name="objectToMonitor">The object to monitor.</param>
            <param name="propertyExpression1">A expression to the value1.</param>
            <param name="propertyExpression2">A expression to the value2.</param>
            <param name="propertyExpression3">A expression to the value3.</param>
            <param name="conversionFunc">Parameter which converts into the end value.</param>
            <typeparam name="TObj">The type of initial object.</typeparam>
            <typeparam name="TTempReturn1">The return type of the value1.</typeparam>
            <typeparam name="TTempReturn2">The return type of the value2.</typeparam>
            <typeparam name="TTempReturn3">The return type of the value3.</typeparam>
            <typeparam name="TReturn">The return value of the observable. Generated from the conversion func.</typeparam>
            <returns>An observable that signals when the properties specified in the expressions have changed.</returns>
            <exception cref="T:System.ArgumentNullException">Either the property expression or the object to monitor is null.</exception>
            <exception cref="T:System.ArgumentException">If there is an issue with the property expression.</exception>
        </member>
        <member name="M:ReactiveMarbles.PropertyChanged.NotifyPropertiesChangeExtensions.WhenChanged``6(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``0,``3}},System.Linq.Expressions.Expression{System.Func{``0,``4}},System.Func{``1,``2,``3,``4,``5})">
            <summary>
            Notifies when the specified property changes.
            </summary>
            <param name="objectToMonitor">The object to monitor.</param>
            <param name="propertyExpression1">A expression to the value1.</param>
            <param name="propertyExpression2">A expression to the value2.</param>
            <param name="propertyExpression3">A expression to the value3.</param>
            <param name="propertyExpression4">A expression to the value4.</param>
            <param name="conversionFunc">Parameter which converts into the end value.</param>
            <typeparam name="TObj">The type of initial object.</typeparam>
            <typeparam name="TTempReturn1">The return type of the value1.</typeparam>
            <typeparam name="TTempReturn2">The return type of the value2.</typeparam>
            <typeparam name="TTempReturn3">The return type of the value3.</typeparam>
            <typeparam name="TTempReturn4">The return type of the value4.</typeparam>
            <typeparam name="TReturn">The return value of the observable. Generated from the conversion func.</typeparam>
            <returns>An observable that signals when the properties specified in the expressions have changed.</returns>
            <exception cref="T:System.ArgumentNullException">Either the property expression or the object to monitor is null.</exception>
            <exception cref="T:System.ArgumentException">If there is an issue with the property expression.</exception>
        </member>
        <member name="M:ReactiveMarbles.PropertyChanged.NotifyPropertiesChangeExtensions.WhenChanged``7(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``0,``3}},System.Linq.Expressions.Expression{System.Func{``0,``4}},System.Linq.Expressions.Expression{System.Func{``0,``5}},System.Func{``1,``2,``3,``4,``5,``6})">
            <summary>
            Notifies when the specified property changes.
            </summary>
            <param name="objectToMonitor">The object to monitor.</param>
            <param name="propertyExpression1">A expression to the value1.</param>
            <param name="propertyExpression2">A expression to the value2.</param>
            <param name="propertyExpression3">A expression to the value3.</param>
            <param name="propertyExpression4">A expression to the value4.</param>
            <param name="propertyExpression5">A expression to the value5.</param>
            <param name="conversionFunc">Parameter which converts into the end value.</param>
            <typeparam name="TObj">The type of initial object.</typeparam>
            <typeparam name="TTempReturn1">The return type of the value1.</typeparam>
            <typeparam name="TTempReturn2">The return type of the value2.</typeparam>
            <typeparam name="TTempReturn3">The return type of the value3.</typeparam>
            <typeparam name="TTempReturn4">The return type of the value4.</typeparam>
            <typeparam name="TTempReturn5">The return type of the value5.</typeparam>
            <typeparam name="TReturn">The return value of the observable. Generated from the conversion func.</typeparam>
            <returns>An observable that signals when the properties specified in the expressions have changed.</returns>
            <exception cref="T:System.ArgumentNullException">Either the property expression or the object to monitor is null.</exception>
            <exception cref="T:System.ArgumentException">If there is an issue with the property expression.</exception>
        </member>
        <member name="M:ReactiveMarbles.PropertyChanged.NotifyPropertiesChangeExtensions.WhenChanged``8(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``0,``3}},System.Linq.Expressions.Expression{System.Func{``0,``4}},System.Linq.Expressions.Expression{System.Func{``0,``5}},System.Linq.Expressions.Expression{System.Func{``0,``6}},System.Func{``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Notifies when the specified property changes.
            </summary>
            <param name="objectToMonitor">The object to monitor.</param>
            <param name="propertyExpression1">A expression to the value1.</param>
            <param name="propertyExpression2">A expression to the value2.</param>
            <param name="propertyExpression3">A expression to the value3.</param>
            <param name="propertyExpression4">A expression to the value4.</param>
            <param name="propertyExpression5">A expression to the value5.</param>
            <param name="propertyExpression6">A expression to the value6.</param>
            <param name="conversionFunc">Parameter which converts into the end value.</param>
            <typeparam name="TObj">The type of initial object.</typeparam>
            <typeparam name="TTempReturn1">The return type of the value1.</typeparam>
            <typeparam name="TTempReturn2">The return type of the value2.</typeparam>
            <typeparam name="TTempReturn3">The return type of the value3.</typeparam>
            <typeparam name="TTempReturn4">The return type of the value4.</typeparam>
            <typeparam name="TTempReturn5">The return type of the value5.</typeparam>
            <typeparam name="TTempReturn6">The return type of the value6.</typeparam>
            <typeparam name="TReturn">The return value of the observable. Generated from the conversion func.</typeparam>
            <returns>An observable that signals when the properties specified in the expressions have changed.</returns>
            <exception cref="T:System.ArgumentNullException">Either the property expression or the object to monitor is null.</exception>
            <exception cref="T:System.ArgumentException">If there is an issue with the property expression.</exception>
        </member>
        <member name="M:ReactiveMarbles.PropertyChanged.NotifyPropertiesChangeExtensions.WhenChanged``9(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``0,``3}},System.Linq.Expressions.Expression{System.Func{``0,``4}},System.Linq.Expressions.Expression{System.Func{``0,``5}},System.Linq.Expressions.Expression{System.Func{``0,``6}},System.Linq.Expressions.Expression{System.Func{``0,``7}},System.Func{``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Notifies when the specified property changes.
            </summary>
            <param name="objectToMonitor">The object to monitor.</param>
            <param name="propertyExpression1">A expression to the value1.</param>
            <param name="propertyExpression2">A expression to the value2.</param>
            <param name="propertyExpression3">A expression to the value3.</param>
            <param name="propertyExpression4">A expression to the value4.</param>
            <param name="propertyExpression5">A expression to the value5.</param>
            <param name="propertyExpression6">A expression to the value6.</param>
            <param name="propertyExpression7">A expression to the value7.</param>
            <param name="conversionFunc">Parameter which converts into the end value.</param>
            <typeparam name="TObj">The type of initial object.</typeparam>
            <typeparam name="TTempReturn1">The return type of the value1.</typeparam>
            <typeparam name="TTempReturn2">The return type of the value2.</typeparam>
            <typeparam name="TTempReturn3">The return type of the value3.</typeparam>
            <typeparam name="TTempReturn4">The return type of the value4.</typeparam>
            <typeparam name="TTempReturn5">The return type of the value5.</typeparam>
            <typeparam name="TTempReturn6">The return type of the value6.</typeparam>
            <typeparam name="TTempReturn7">The return type of the value7.</typeparam>
            <typeparam name="TReturn">The return value of the observable. Generated from the conversion func.</typeparam>
            <returns>An observable that signals when the properties specified in the expressions have changed.</returns>
            <exception cref="T:System.ArgumentNullException">Either the property expression or the object to monitor is null.</exception>
            <exception cref="T:System.ArgumentException">If there is an issue with the property expression.</exception>
        </member>
        <member name="M:ReactiveMarbles.PropertyChanged.NotifyPropertiesChangeExtensions.WhenChanged``10(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``0,``3}},System.Linq.Expressions.Expression{System.Func{``0,``4}},System.Linq.Expressions.Expression{System.Func{``0,``5}},System.Linq.Expressions.Expression{System.Func{``0,``6}},System.Linq.Expressions.Expression{System.Func{``0,``7}},System.Linq.Expressions.Expression{System.Func{``0,``8}},System.Func{``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Notifies when the specified property changes.
            </summary>
            <param name="objectToMonitor">The object to monitor.</param>
            <param name="propertyExpression1">A expression to the value1.</param>
            <param name="propertyExpression2">A expression to the value2.</param>
            <param name="propertyExpression3">A expression to the value3.</param>
            <param name="propertyExpression4">A expression to the value4.</param>
            <param name="propertyExpression5">A expression to the value5.</param>
            <param name="propertyExpression6">A expression to the value6.</param>
            <param name="propertyExpression7">A expression to the value7.</param>
            <param name="propertyExpression8">A expression to the value8.</param>
            <param name="conversionFunc">Parameter which converts into the end value.</param>
            <typeparam name="TObj">The type of initial object.</typeparam>
            <typeparam name="TTempReturn1">The return type of the value1.</typeparam>
            <typeparam name="TTempReturn2">The return type of the value2.</typeparam>
            <typeparam name="TTempReturn3">The return type of the value3.</typeparam>
            <typeparam name="TTempReturn4">The return type of the value4.</typeparam>
            <typeparam name="TTempReturn5">The return type of the value5.</typeparam>
            <typeparam name="TTempReturn6">The return type of the value6.</typeparam>
            <typeparam name="TTempReturn7">The return type of the value7.</typeparam>
            <typeparam name="TTempReturn8">The return type of the value8.</typeparam>
            <typeparam name="TReturn">The return value of the observable. Generated from the conversion func.</typeparam>
            <returns>An observable that signals when the properties specified in the expressions have changed.</returns>
            <exception cref="T:System.ArgumentNullException">Either the property expression or the object to monitor is null.</exception>
            <exception cref="T:System.ArgumentException">If there is an issue with the property expression.</exception>
        </member>
        <member name="M:ReactiveMarbles.PropertyChanged.NotifyPropertiesChangeExtensions.WhenChanged``11(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``0,``3}},System.Linq.Expressions.Expression{System.Func{``0,``4}},System.Linq.Expressions.Expression{System.Func{``0,``5}},System.Linq.Expressions.Expression{System.Func{``0,``6}},System.Linq.Expressions.Expression{System.Func{``0,``7}},System.Linq.Expressions.Expression{System.Func{``0,``8}},System.Linq.Expressions.Expression{System.Func{``0,``9}},System.Func{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Notifies when the specified property changes.
            </summary>
            <param name="objectToMonitor">The object to monitor.</param>
            <param name="propertyExpression1">A expression to the value1.</param>
            <param name="propertyExpression2">A expression to the value2.</param>
            <param name="propertyExpression3">A expression to the value3.</param>
            <param name="propertyExpression4">A expression to the value4.</param>
            <param name="propertyExpression5">A expression to the value5.</param>
            <param name="propertyExpression6">A expression to the value6.</param>
            <param name="propertyExpression7">A expression to the value7.</param>
            <param name="propertyExpression8">A expression to the value8.</param>
            <param name="propertyExpression9">A expression to the value9.</param>
            <param name="conversionFunc">Parameter which converts into the end value.</param>
            <typeparam name="TObj">The type of initial object.</typeparam>
            <typeparam name="TTempReturn1">The return type of the value1.</typeparam>
            <typeparam name="TTempReturn2">The return type of the value2.</typeparam>
            <typeparam name="TTempReturn3">The return type of the value3.</typeparam>
            <typeparam name="TTempReturn4">The return type of the value4.</typeparam>
            <typeparam name="TTempReturn5">The return type of the value5.</typeparam>
            <typeparam name="TTempReturn6">The return type of the value6.</typeparam>
            <typeparam name="TTempReturn7">The return type of the value7.</typeparam>
            <typeparam name="TTempReturn8">The return type of the value8.</typeparam>
            <typeparam name="TTempReturn9">The return type of the value9.</typeparam>
            <typeparam name="TReturn">The return value of the observable. Generated from the conversion func.</typeparam>
            <returns>An observable that signals when the properties specified in the expressions have changed.</returns>
            <exception cref="T:System.ArgumentNullException">Either the property expression or the object to monitor is null.</exception>
            <exception cref="T:System.ArgumentException">If there is an issue with the property expression.</exception>
        </member>
        <member name="M:ReactiveMarbles.PropertyChanged.NotifyPropertiesChangeExtensions.WhenChanged``12(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``0,``3}},System.Linq.Expressions.Expression{System.Func{``0,``4}},System.Linq.Expressions.Expression{System.Func{``0,``5}},System.Linq.Expressions.Expression{System.Func{``0,``6}},System.Linq.Expressions.Expression{System.Func{``0,``7}},System.Linq.Expressions.Expression{System.Func{``0,``8}},System.Linq.Expressions.Expression{System.Func{``0,``9}},System.Linq.Expressions.Expression{System.Func{``0,``10}},System.Func{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            Notifies when the specified property changes.
            </summary>
            <param name="objectToMonitor">The object to monitor.</param>
            <param name="propertyExpression1">A expression to the value1.</param>
            <param name="propertyExpression2">A expression to the value2.</param>
            <param name="propertyExpression3">A expression to the value3.</param>
            <param name="propertyExpression4">A expression to the value4.</param>
            <param name="propertyExpression5">A expression to the value5.</param>
            <param name="propertyExpression6">A expression to the value6.</param>
            <param name="propertyExpression7">A expression to the value7.</param>
            <param name="propertyExpression8">A expression to the value8.</param>
            <param name="propertyExpression9">A expression to the value9.</param>
            <param name="propertyExpression10">A expression to the value10.</param>
            <param name="conversionFunc">Parameter which converts into the end value.</param>
            <typeparam name="TObj">The type of initial object.</typeparam>
            <typeparam name="TTempReturn1">The return type of the value1.</typeparam>
            <typeparam name="TTempReturn2">The return type of the value2.</typeparam>
            <typeparam name="TTempReturn3">The return type of the value3.</typeparam>
            <typeparam name="TTempReturn4">The return type of the value4.</typeparam>
            <typeparam name="TTempReturn5">The return type of the value5.</typeparam>
            <typeparam name="TTempReturn6">The return type of the value6.</typeparam>
            <typeparam name="TTempReturn7">The return type of the value7.</typeparam>
            <typeparam name="TTempReturn8">The return type of the value8.</typeparam>
            <typeparam name="TTempReturn9">The return type of the value9.</typeparam>
            <typeparam name="TTempReturn10">The return type of the value10.</typeparam>
            <typeparam name="TReturn">The return value of the observable. Generated from the conversion func.</typeparam>
            <returns>An observable that signals when the properties specified in the expressions have changed.</returns>
            <exception cref="T:System.ArgumentNullException">Either the property expression or the object to monitor is null.</exception>
            <exception cref="T:System.ArgumentException">If there is an issue with the property expression.</exception>
        </member>
        <member name="M:ReactiveMarbles.PropertyChanged.NotifyPropertiesChangeExtensions.WhenChanged``13(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``0,``3}},System.Linq.Expressions.Expression{System.Func{``0,``4}},System.Linq.Expressions.Expression{System.Func{``0,``5}},System.Linq.Expressions.Expression{System.Func{``0,``6}},System.Linq.Expressions.Expression{System.Func{``0,``7}},System.Linq.Expressions.Expression{System.Func{``0,``8}},System.Linq.Expressions.Expression{System.Func{``0,``9}},System.Linq.Expressions.Expression{System.Func{``0,``10}},System.Linq.Expressions.Expression{System.Func{``0,``11}},System.Func{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            Notifies when the specified property changes.
            </summary>
            <param name="objectToMonitor">The object to monitor.</param>
            <param name="propertyExpression1">A expression to the value1.</param>
            <param name="propertyExpression2">A expression to the value2.</param>
            <param name="propertyExpression3">A expression to the value3.</param>
            <param name="propertyExpression4">A expression to the value4.</param>
            <param name="propertyExpression5">A expression to the value5.</param>
            <param name="propertyExpression6">A expression to the value6.</param>
            <param name="propertyExpression7">A expression to the value7.</param>
            <param name="propertyExpression8">A expression to the value8.</param>
            <param name="propertyExpression9">A expression to the value9.</param>
            <param name="propertyExpression10">A expression to the value10.</param>
            <param name="propertyExpression11">A expression to the value11.</param>
            <param name="conversionFunc">Parameter which converts into the end value.</param>
            <typeparam name="TObj">The type of initial object.</typeparam>
            <typeparam name="TTempReturn1">The return type of the value1.</typeparam>
            <typeparam name="TTempReturn2">The return type of the value2.</typeparam>
            <typeparam name="TTempReturn3">The return type of the value3.</typeparam>
            <typeparam name="TTempReturn4">The return type of the value4.</typeparam>
            <typeparam name="TTempReturn5">The return type of the value5.</typeparam>
            <typeparam name="TTempReturn6">The return type of the value6.</typeparam>
            <typeparam name="TTempReturn7">The return type of the value7.</typeparam>
            <typeparam name="TTempReturn8">The return type of the value8.</typeparam>
            <typeparam name="TTempReturn9">The return type of the value9.</typeparam>
            <typeparam name="TTempReturn10">The return type of the value10.</typeparam>
            <typeparam name="TTempReturn11">The return type of the value11.</typeparam>
            <typeparam name="TReturn">The return value of the observable. Generated from the conversion func.</typeparam>
            <returns>An observable that signals when the properties specified in the expressions have changed.</returns>
            <exception cref="T:System.ArgumentNullException">Either the property expression or the object to monitor is null.</exception>
            <exception cref="T:System.ArgumentException">If there is an issue with the property expression.</exception>
        </member>
        <member name="M:ReactiveMarbles.PropertyChanged.NotifyPropertiesChangeExtensions.WhenChanged``14(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``0,``3}},System.Linq.Expressions.Expression{System.Func{``0,``4}},System.Linq.Expressions.Expression{System.Func{``0,``5}},System.Linq.Expressions.Expression{System.Func{``0,``6}},System.Linq.Expressions.Expression{System.Func{``0,``7}},System.Linq.Expressions.Expression{System.Func{``0,``8}},System.Linq.Expressions.Expression{System.Func{``0,``9}},System.Linq.Expressions.Expression{System.Func{``0,``10}},System.Linq.Expressions.Expression{System.Func{``0,``11}},System.Linq.Expressions.Expression{System.Func{``0,``12}},System.Func{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            Notifies when the specified property changes.
            </summary>
            <param name="objectToMonitor">The object to monitor.</param>
            <param name="propertyExpression1">A expression to the value1.</param>
            <param name="propertyExpression2">A expression to the value2.</param>
            <param name="propertyExpression3">A expression to the value3.</param>
            <param name="propertyExpression4">A expression to the value4.</param>
            <param name="propertyExpression5">A expression to the value5.</param>
            <param name="propertyExpression6">A expression to the value6.</param>
            <param name="propertyExpression7">A expression to the value7.</param>
            <param name="propertyExpression8">A expression to the value8.</param>
            <param name="propertyExpression9">A expression to the value9.</param>
            <param name="propertyExpression10">A expression to the value10.</param>
            <param name="propertyExpression11">A expression to the value11.</param>
            <param name="propertyExpression12">A expression to the value12.</param>
            <param name="conversionFunc">Parameter which converts into the end value.</param>
            <typeparam name="TObj">The type of initial object.</typeparam>
            <typeparam name="TTempReturn1">The return type of the value1.</typeparam>
            <typeparam name="TTempReturn2">The return type of the value2.</typeparam>
            <typeparam name="TTempReturn3">The return type of the value3.</typeparam>
            <typeparam name="TTempReturn4">The return type of the value4.</typeparam>
            <typeparam name="TTempReturn5">The return type of the value5.</typeparam>
            <typeparam name="TTempReturn6">The return type of the value6.</typeparam>
            <typeparam name="TTempReturn7">The return type of the value7.</typeparam>
            <typeparam name="TTempReturn8">The return type of the value8.</typeparam>
            <typeparam name="TTempReturn9">The return type of the value9.</typeparam>
            <typeparam name="TTempReturn10">The return type of the value10.</typeparam>
            <typeparam name="TTempReturn11">The return type of the value11.</typeparam>
            <typeparam name="TTempReturn12">The return type of the value12.</typeparam>
            <typeparam name="TReturn">The return value of the observable. Generated from the conversion func.</typeparam>
            <returns>An observable that signals when the properties specified in the expressions have changed.</returns>
            <exception cref="T:System.ArgumentNullException">Either the property expression or the object to monitor is null.</exception>
            <exception cref="T:System.ArgumentException">If there is an issue with the property expression.</exception>
        </member>
        <member name="T:ReactiveMarbles.PropertyChanged.NotifyPropertyChangedExtensions">
            <summary>
            Provides extension methods for the notify property changed extensions.
            </summary>
        </member>
        <member name="M:ReactiveMarbles.PropertyChanged.NotifyPropertyChangedExtensions.WhenChanged``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Notifies when the specified property changes.
            </summary>
            <param name="objectToMonitor">The object to monitor.</param>
            <param name="propertyExpression">The expression to the object.</param>
            <typeparam name="TObj">The type of initial object.</typeparam>
            <typeparam name="TReturn">The eventual return value.</typeparam>
            <returns>An observable that signals when the property specified in the expression has changed.</returns>
            <exception cref="T:System.ArgumentNullException">Either the property expression or the object to monitor is null.</exception>
            <exception cref="T:System.ArgumentException">If there is an issue with the property expression.</exception>
        </member>
        <member name="M:ReactiveMarbles.PropertyChanged.NotifyPropertyChangedExtensions.WhenChangedWithSender``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Notifies when the specified property changes.
            </summary>
            <param name="objectToMonitor">The object to monitor.</param>
            <param name="propertyExpression">The expression to the object.</param>
            <typeparam name="TObj">The type of initial object.</typeparam>
            <typeparam name="TReturn">The eventual return value.</typeparam>
            <returns>An observable that signals when the property specified in the expression has changed.</returns>
            <exception cref="T:System.ArgumentNullException">Either the property expression or the object to monitor is null.</exception>
            <exception cref="T:System.ArgumentException">If there is an issue with the property expression.</exception>
        </member>
    </members>
</doc>
